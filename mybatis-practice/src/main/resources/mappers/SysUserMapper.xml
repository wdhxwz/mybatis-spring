<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.wangdh.mybatis.practice.mapper.SysUserMapper">
    <resultMap id="userMap" type="com.wangdh.mybatis.practice.model.SysUser">
        <id property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="userPassword" column="user_password"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img"/>
        <result property="createTime" column="create_time"
                jdbcType="TIMESTAMP"/>
    </resultMap>

    <select id="selectById" resultMap="userMap">
        SELECT * FROM sys_user WHERE id = #{id}
    </select>

    <select id="selectAll" resultType="SysUser">
        SELECT id,
          user_name userName,
          user_password userPassword,
          user_email userEmail,
          user_info userInfo,
          head_img headImg,
          create_time createTime
        FROM sys_user
    </select>

    <select id="selectRolesByUserId" resultType="SysRole">
        SELECT
            r.id,
            r.role_name roleName,
            r.enabled,
            r.create_by,
            r.create_time
        FROM sys_user u
        INNER JOIN sys_user_role ur ON u.id = ur.user_id
        INNER JOIN sys_role r ON r.id = ur.role_id
        WHERE u.id=#{userId}
    </select>

    <select id="selectRolesByUserIdAndRoleEnabled" resultType="SysRole">
        SELECT
            r.id,
            r.role_name roleName,
            r.enabled,
            r.create_by,
            r.create_time
        FROM sys_user u
        INNER JOIN sys_user_role ur ON u.id = ur.user_id
        INNER JOIN sys_role r ON r.id = ur.role_id
        WHERE u.id=#{userId} AND  r.enabled=#{enabled}
    </select>

    <select id="selectRolesByUserIdAndRoleEnabled2" resultType="SysRole">
        SELECT
        r.id,
        r.role_name roleName,
        r.enabled,
        r.create_by,
        r.create_time
        FROM sys_user u
        INNER JOIN sys_user_role ur ON u.id = ur.user_id
        INNER JOIN sys_role r ON r.id = ur.role_id
        WHERE u.id=#{user.id} AND  r.enabled=#{role.enabled}
    </select>

    <!-- 将自动增长的id回写回对应的属性：useGeneratedKeys="true" keyProperty="id" -->
    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO sys_user(
            user_name,
            user_password,
            user_email,
            user_info,
            head_img,
            create_time )
            VALUES (
            #{userName},
            #{userPassword},
            #{userEmail},
            #{userInfo},
            #{headImg},
            #{createTime,jdbcType = TIMESTAMP}
            )
    </insert>

    <insert id="insert2">
        INSERT INTO sys_user(
        user_name,
        user_password,
        user_email,
        user_info,
        head_img,
        create_time )
        VALUES (
        #{userName},
        #{userPassword},
        #{userEmail},
        #{userInfo},
        #{headImg},
        #{createTime,jdbcType = TIMESTAMP}
        )
        <!-- selectKey
        适用于不提供主键自增长功能的数据库，如Oracle，
        也适用于主键自增长功能的数据库，如SQLServer和Mysql
        -->
        <selectKey keyColumn="id" resultType="long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <update id="updateById">
        UPDATE sys_user
        SET user_name=#{userName},
            user_password=#{userPassword},
            user_email=#{userEmail},
            user_info=#{userInfo},
            head_img=#{headImg}
        WHERE id=#{id}
    </update>

    <delete id="deleteById">
        DELETE FROM sys_user WHERE id = #{id}
    </delete>
</mapper>